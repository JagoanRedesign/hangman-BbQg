from typing import Union, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from user import User
from db.db import DataBase
from random import randint
from time import time
from io import BufferedReader


class Game:
    __slots__ = ['db', 'select', 'lost_health', 'word_id', 'time_start', 'input_letters', 'word_array', 'category_id',
                 'word', 'category', 'user', 'status', 'point']

    def __init__(self, user: User):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã. –ë–µ—Ä–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏ –ø–æ–º–µ—â–∞–µ—Ç –µ–µ –≤ –ë–î.

        Args:
             user: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.user = user

        # —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        self.db = DataBase()

        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ
        select = Game.exist_created_games(self.user)

        # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.input_letters = ''

        # —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–≥—Ä–∞
        if select:
            # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∂–∏–∑–Ω–∏
            self.lost_health = select[0]
            # id —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ
            self.word_id = select[1]
            # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            self.time_start = select[2]

            # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, —Ç–æ –±–µ—Ä–µ–º –µ–≥–æ
            if select[3]:
                self.input_letters = select[3]

        # –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        else:
            # –±–µ—Ä–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ
            count_words = self.db.select(table='words', select_data='count(*)')[0]
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤. –≠—Ç–æ –±—É–¥–µ—Ç –Ω–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞
            self.word_id = randint(1, count_words)
            # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7
            self.lost_health = 7
            # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã - —Å–µ–π—á–∞—Å
            self.time_start = time()
            # –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –≤ –ë–î
            self.db.insert(
                table='games', data={'word_id': self.word_id, 'time_start': self.time_start, 'user_id': user.user_id})

        # –Ω—É–∂–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID —Å–ª–æ–≤–æ, –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –î–µ–ª–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.word_array = self.db.select(table='words', select_data=['cat_id', 'name'], where={'id': self.word_id})
        # –ø–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–∞–º–æ —Å–ª–æ–≤–æ
        self.category_id, self.word = self.word_array

        # –¥–µ–ª–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–æ –±–æ–ª—å—à–∏–º–∏, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏
        self.word = self.word.upper().replace('–Å', '–ï')

        # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        self.category = self.db.select(table='categories', select_data='name', where={'id': self.category_id})[0]

        # —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã. 0 - –∏–≥—Ä–∞ –∏–¥–µ—Ç, -2 –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º. 2 - –ø–æ–±–µ–¥–æ–π
        self.status = 0

        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É
        self.point = 0

    def get_game_content(self) -> Tuple[str, InlineKeyboardMarkup, Union[str, BufferedReader]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏–≥—Ä—ã –∏–∑ –ë–î

        Return:
            –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–≥—Ä–æ–π, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        """
        # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à—ç
        file_id = self.db.select(table='photo',
                                 select_data='file_id',
                                 where={'photo': f'image/{8 - self.lost_health}.png'})
        if file_id:
            # –µ—Å–ª–∏ –µ—Å—Ç—å, –±–µ—Ä–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = file_id[0]
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
            photo = open(f'image/{8 - self.lost_health}.png', mode='rb')

        if self.status == 0:
            keyboard = self._get_keyboard_for_game()
            word = self._get_word_for_game()
        else:
            word = self.word
            keyboard = None

        msg = f'*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {self.category}' \
              f'\n\n*–°–ª–æ–≤–æ:*' \
              f'\n{word}'
        if self.status == -2:
            msg += "\n\n‚ùå –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòî"
        elif self.status == 2:
            msg += "\n\n‚úÖ –ü–æ–±–µ–¥–∞\!" \
                   f"\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: *{self.point}* üíé –æ—á–∫–æ–≤"

        return msg, keyboard, photo

    def _get_word_for_game(self):
        word = ''
        for let in self.word:
            if let in self.input_letters:
                word += let
            else:
                word += '‚óªÔ∏è'
        return word

    def _get_keyboard_for_game(self) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö –±—É–∫–≤.
        –ü–æ–º–µ—á–∞–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏

        Return:
            –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup()
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 7
        keyboard.row_width = 7
        # –±—É–¥–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –ê
        let_a_number = ord('–ê')

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
        array_alphabet = [chr(num) for num in range(let_a_number, let_a_number + 32)]

        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –±—É–∫–≤–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        for let in array_alphabet:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –±—É–∫–≤—É
            if let in self.input_letters:
                # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞—è –±—É–∫–≤–∞ –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ
                if let in self.word:
                    text_button = f'‚úÖ{let}'
                # –∏–Ω–∞—á–µ –µ–µ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è
                else:
                    text_button = f'‚ùå{let}'

            # –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∂–∏–º–∞–ª –±—É–∫–≤—É
            else:
                text_button = f'·Ö†{let}'
                # –í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–µ—Å—Ç–µ —Å –Ω–µ–≤–∏–¥–∏–º—ã–º —Å–∏–º–≤–æ–ª–æ–º, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
                # –∏–∑-–∑–∞ —á–µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—É–¥–µ—Ç –Ω–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π

            # –ø–æ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            button = InlineKeyboardButton(callback_data=f'let:{let}', text=text_button)
            keyboard.insert(button)

        return keyboard

    def press_button(self, button: str) -> Tuple[int, str]:
        """
        –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        Args:
            button: callback.data –∫–Ω–æ–ø–∫–∏ —Å –±—É–∫–≤–æ–π
        Return:
            int: —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ –±—É–∫–≤—ã –∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                 –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∂–∏–∑–Ω–µ–π.
            str: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        """
        # –±–µ—Ä–µ–º –±—É–∫–≤—É –∏–∑ –∫—ç–ª–ª–±—ç–∫-–¥–∞—Ç—ã (–æ–Ω–∞ —É –Ω–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ ':')
        letter = button.split(':')[1]

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∏–º–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ —ç—Ç—É –±—É–∫–≤—É
        if letter in self.input_letters:
            return 0, '–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç—É –±—É–∫–≤—É'

        # –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∂–∞—Ç—ã—Ö –±—É–∫–≤
        self.input_letters += letter

        # –µ—Å–ª–∏ –±—É–∫–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ
        if letter in self.word:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if set(self.input_letters) >= set(self.word):

                # –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –∑–∞ –∏–≥—Ä—É
                self.point += self.lost_health * 25
                time_finish = time()
                time_point = 150 - (time_finish - self.time_start)
                if time_point > 0:
                    self.point += int(time_point)
                # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –≤ –ë–î
                self.db.update(
                    table='games',
                    data={'status': 2, 'input_letters': self.input_letters, 'time_finish': time(), 'point': self.point},
                    where=self._get_where_my_game(self.user))
                self.status = 2
                return 2, '–°–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≥–∞–¥–∞–Ω–æ!'

            # –µ—Å–ª–∏ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å –æ—Ç–≥–∞–¥–∞–Ω–æ
            self.db.update(table='games', data={'input_letters': self.input_letters})
            return 1, '–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É!'

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ, –∑–∞–±–∏—Ä–∞–µ–º 1 –∂–∏–∑–Ω—å
        self.lost_health -= 1
        # –µ—Å–ª–∏ –∫–æ–ª–∏–µ—á—Ç–≤–æ –∂–∏–∑–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å 0, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∏–≥—Ä–∞–ª
        if self.lost_health == 0:
            # –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            self.db.update(
                table='games', data={'status': -2, 'input_letters': self.input_letters, 'time_finish': time()},
                where=self._get_where_my_game(self.user))
            self.status = -2
            return -2, '–ù–µ–≤–µ—Ä–Ω–∞—è –±—É–∫–≤–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'

        # –µ—Å–ª–∏ –∂–∏–∑–Ω–∏ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å
        self.db.update(
            table='games', data={'input_letters': self.input_letters, 'lost_health': self.lost_health},
            where=self._get_where_my_game(self.user))
        return -1, '–ù–µ–≤–µ—Ä–Ω–∞—è –±—É–∫–≤–∞!'

    @staticmethod
    def exist_created_games(user: User) -> Union[list, bool]:
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã.

        Args:
            user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        Return:
            False - —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä –Ω–µ—Ç; list - —Å —Å–∞–º–æ–π –∏–≥—Ä–æ–π –∏–Ω–∞—á–µ
        """
        db = DataBase()
        select = db.select(
            table='games',
            select_data=['lost_health', 'word_id', 'time_start', 'input_letters'],
            where=Game._get_where_my_game(user))
        return select if select else False

    @staticmethod
    def _get_where_my_game(user: User) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã

        Args:
            user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        Return:
            —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ WHERE
        """
        return {'user_id': user.user_id, 'status': 0}
