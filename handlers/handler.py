from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery

from image import get_image
from text import text
from handlers import handler_decorates
from user import User
from aiogram.types import ReplyKeyboardMarkup, InputMediaPhoto
from config import BOT_USERNAME
from text.string_formatter_mb import format_string
from game import Game
from db.db import DataBase
from io import BufferedReader


async def send_photo(
        message: Message, caption: str,
        photo: (str, BufferedReader),
        keyboard: (InlineKeyboardMarkup, ReplyKeyboardMarkup)) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫—ç—à–∏—Ä—É–µ—Ç –µ–≥–æ

    :param message:
    :param caption: —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    :param photo: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :param keyboard: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return: True - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–¥–∞–ª–∞—Å—å, False - –æ—à–∏–±–∫–∞
    """
    try:
        sent = await message.answer_photo(caption=caption, reply_markup=keyboard, photo=photo)
    except:
        return False
        pass
    else:
        cashing_photo(photo, sent)
    return True


async def edit_media(
        message: Message, caption: str,
        photo: (str, BufferedReader),
        keyboard: (InlineKeyboardMarkup, ReplyKeyboardMarkup) = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫—ç—à–∏—Ä—É–µ—Ç –µ–≥–æ

    :param message:
    :param caption: —Ç–µ–∫—Å—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    :param photo: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :param keyboard: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return: True - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–¥–∞–ª–∞—Å—å, False - –æ—à–∏–±–∫–∞
    """
    media = InputMediaPhoto(media=photo, caption=caption)
    try:
        sent = await message.edit_media(media=media, reply_markup=keyboard)
    except Exception as e:
        print(e)
        return False
    else:
        cashing_photo(photo, sent)
    return True


def cashing_photo(photo, sent) -> bool:
    """
    –ö—ç—à–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :param photo:
    :param sent: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    :return: True - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–æ—Å—å, False - –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.
    """
    if not isinstance(photo, str):
        db = DataBase()
        select = db.select(table='photo', where={'file_id': sent.photo[0].file_id})
        if not select:
            db.insert(table='photo', data={'photo': photo.name, 'file_id': sent.photo[0].file_id})
        return True
    return False


@handler_decorates.get_user
async def start_game(message: Message, user: User):
    """
    –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã. –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–≥—Ä—É.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: None
    """
    game = Game(user)
    msg, keyboard, photo = game.get_game_content()
    await send_photo(message=message, caption=msg, keyboard=keyboard, photo=photo)


@handler_decorates.get_user
async def show_records(message: Message, user: User):
    db = DataBase()
    my_point = db.select(table='games', select_data='sum(point)', where={'user_id': user.user_id})[0]
    my_point = my_point if my_point else 0
    msg = f'*{text.main_menu[1]}*' \
          f'\n\n –£ –≤–∞—Å: *{my_point}* üíé –æ—á–∫–æ–≤\n'

    row_record = db.get_free_select_execute(
        'SELECT sum(games.point), user.name '
        'FROM games LEFT JOIN user ON user.user_id = games.user_id '
        'GROUP BY games.user_id ORDER BY sum(games.point) DESC LIMIT 50 ')

    for i, one_record in enumerate(row_record, 1):
        msg += f'\n{i}\. {format_string(one_record[1])} \- *{one_record[0]}* üíé'
    await message.answer(msg)


@handler_decorates.get_user
async def call_friends(message: Message, user: User):
    """
    –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Ä–µ—Ñ–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: None
    """
    link = format_string(f"https://t.me/{BOT_USERNAME}?start={str(user.user_id)}")
    msg = '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É –≤–∏—Å–µ–ª–∏—Ü–∞' \
          '\n–î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º —Å—Å—ã–ª–∫—É: ' \
          f'\n\n{link}'
    await message.answer(msg)


@handler_decorates.get_user
async def get_another_message(message: Message, *args, **kwargs):
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±—ã—Ö –∫–ª–∞–≤–∏—à –∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
    –¢–∞–∫–∂–µ, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param args:
    :param kwargs:
    :return: None
    """
    msg = f'*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ‚ò†Ô∏è –≤–∏—Å–µ–ª–∏—Ü–∞\!*' \
          f'\n\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤ –∏–≥—Ä–µ —É–≥–∞–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, –¥–µ–ª–∞—è –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫\.' \
          f'\n–ù–∞–∂–∏–º–∞–π *‚ò†Ô∏è –∏–≥—Ä–∞—Ç—å*, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\!'

    keyboard = ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    keyboard.row_width = 2
    keyboard.add(*text.main_menu)

    photo = get_image('image/hangman.png')

    await send_photo(message=message, photo=photo, caption=msg, keyboard=keyboard)


@handler_decorates.get_user_by_callback
async def press_button(callback: CallbackQuery, user: User):
    if Game.isCreatedGame(user):

        game = Game(user=user)
        code, ntf = game.press_button(callback.data)
        try:
            # –ø–æ –∏–¥–µ–µ, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ntf, –Ω–æ –æ–Ω–æ –º–µ—à–∞–µ—Ç –∏–≥—Ä–µ
            await callback.answer()
        except:
            pass

        msg, keyboard, photo = game.get_game_content()
        if code == -2:
            await edit_media(message=callback.message, photo=photo, caption=msg)
        elif code == -1:
            await edit_media(message=callback.message, photo=photo, caption=msg, keyboard=keyboard)
        elif code == 1:
            await callback.message.edit_caption(caption=msg, reply_markup=keyboard)
        elif code == 2:
            await callback.message.edit_caption(caption=msg)


    else:
        await callback.answer('–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä')
